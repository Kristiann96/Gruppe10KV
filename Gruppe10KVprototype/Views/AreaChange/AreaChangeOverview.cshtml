@model List<Models.SaksbehandlerModels.AreaChangeModel>

@{
    ViewData["Title"] = "Overview";
}

<h2>Oversikt over endringer</h2>

<table class="table">
    <thead>
    <tr>
        <th>ID</th>
        <th>GeoJSON</th>
        <th>Description</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var change in Model)
    {
        <tr>
            <td>@change.Id</td>
            <td>@change.GeoJson</td>
            <td>@change.Description</td>
        </tr>
    }
    </tbody>
</table>

<div id="map" style="height: 500px;"></div>

@section Scripts
{
    <!-- Leaflet CSS and JS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <script>
        var map = L.map('map').setView([65.5, 17.0], 4);
        
        //Add tile layer (using OpenStreetMap)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
        
        //Itererer over registrerte endringer og legger dem til i kartet
        var changes = @Html.Raw(Json.Serialize(Model));
        
        changes.forEach(function (change) {
            //Parser GeoJSON dataen og legger det til i kartet
            var geoJsonData = JSON.parse(change.geoJson);
            L.geoJSON(geoJsonData).addTo(map);
        
            //Optionally, bind a popup with the change description
            var layer = L.geoJSON(geoJsonData).bindPopup(change.description);
            layer.addTo(map);
        });
    </script>
}