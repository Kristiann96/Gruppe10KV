@model OppdatereInnmeldingViewModel
@{
    ViewData["Title"] = "Oppdatere innmelding";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.css" />
    <link rel="stylesheet" href="~/css/pages/innmelder/OpppdaterInnmelding.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
}
<div class="map-page-container">
   
    <div class="form-side">
        <div class="map-card">
            <div class="map-header">
                <h1 class="map-title">Oppdatere innmelding</h1>
                <p class="map-description">Rediger informasjon om kartfeilen</p>
            </div>

            <div class="map-content">
                <form id="innmeldingForm" method="post">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.InnmeldingId)
                    @Html.HiddenFor(m => m.GeometriGeoJson)

                    <div class="form-group">
                        <label asp-for="Tittel">Tittel</label>
                        <input asp-for="Tittel" class="form-control" />
                        <span asp-validation-for="Tittel" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="Beskrivelse">Beskrivelse</label>
                        <textarea asp-for="Beskrivelse" class="form-control" rows="5"></textarea>
                        <span asp-validation-for="Beskrivelse" class="text-danger"></span>
                    </div>

                    <div class="map-controls">
                        <button type="button" id="lagreTekstBtn" class="map-button map-button-secondary">
                            Lagre tekst
                        </button>
                        <button type="button" id="lagreGeometriBtn" class="map-button map-button-secondary" disabled>
                            Lagre geometri
                        </button>
                        <button type="button" id="slettInnmeldingBtn" class="map-button map-button-primary">
                            Slett innmelding
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
   
    <div class="map-side">
        <div id="map"></div>
    </div>
</div>

<div class="info-popup" id="geometryEditInfo">
    <span class="info-popup-close" onclick="closeGeometryInfo()">&times;</span>
    <div class="info-popup-title">
        <i class="fa-regular fa-pen-to-square"></i> 
        Tips for redigering
    </div>
    <div class="info-popup-content">
        <p>For å redigere geometrien i kartet:</p>
        <ol>
            <li>Klikk på <i class="fa-regular fa-pen-to-square"></i> ikonet i kartverktøyene</li>
            <li>Velg geometrien du vil redigere</li>
            <li>Dra i punktene for å endre form</li>
            <li>Klikk "Save" i kartverktøyet når du er fornøyd</li>
            <li>Klikk "Lagre geometri" for å lagre permanent</li>
        </ol>
    </div>
</div>

<div id="slettModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Bekreft sletting</h3>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <p>Er du sikker på at du vil slette denne innmeldingen? Dette kan ikke angres.</p>
        </div>
        <div class="modal-footer">
            <button class="map-button map-button-secondary" onclick="lukkSlettModal()">Avbryt</button>
            <button class="map-button map-button-primary" onclick="slettInnmelding()">Slett</button>
        </div>
    </div>
</div>

<div id="endringerModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Ulagrede endringer</h3>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <p>Du har ulagrede endringer. Vil du lagre før du forlater siden?</p>
        </div>
        <div class="modal-footer">
            <button class="map-button map-button-secondary" onclick="forlat()">Forlat uten å lagre</button>
            <button class="map-button map-button-primary" onclick="lagreOgForlat()">Lagre og forlat</button>
        </div>
    </div>
</div>

@section Scripts {
   
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script src="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.js"></script>
    
    <script src="~/js/maps/config/mapConfig.js"></script>
    <script src="~/js/maps/config/drawConfig.js"></script>
    <script src="~/js/maps/services/wmsService.js"></script>
    <script src="~/js/maps/utils/mapControls.js"></script>
    <script src="~/js/config/timeoutConfig.js"></script>
    
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        let harUlagredeEndringer = false;
        let geometriEndret = false;

        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('geometryEditInfo').style.display = 'block';
            setTimeout(closeGeometryInfo, TIMEOUT_CONFIG.OPPDATERE_INNMELDING_GEOMETRY_INFO_DISPLAY);
            });

        function closeGeometryInfo() {
            const popup = document.getElementById('geometryEditInfo');
            popup.style.opacity = '0';
            setTimeout(() => {
                popup.style.display = 'none';
                popup.style.opacity = '1';
            }, 300);
        }
        
        const map = MapConfig.initializeMap('map', [62.1995, 6.1286], 15);
        const drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);
        
        const drawControl = new L.Control.Draw({
            edit: {
                featureGroup: drawnItems,
                edit: {
                    selectedPathOptions: {
                        maintainColor: true,
                        moveMarkers: true
                    }
                }
            },
            draw: {
                polygon: true,
                polyline: true,
                rectangle: true,
                circle: false,
                circlemarker: false,
                marker: true
            }
        });
        map.addControl(drawControl);

       
        MapControls.initializeControls(map);

      
       if ('@Model.GeometriGeoJson') {
        try {
            const geoJson = JSON.parse('@Html.Raw(Model.GeometriGeoJson)');
            L.geoJSON(geoJson, {
                onEachFeature: function (feature, layer) {
                    drawnItems.addLayer(layer);
                }
            });
            map.fitBounds(drawnItems.getBounds());
            } catch (error) {
                console.error('Error loading geometry:', error);
                }
            }
        
        map.on('draw:editstart', function (e) {
            document.getElementById('geometryEditInfo').style.display = 'block';
            setTimeout(() => {
                const popup = document.getElementById('geometryEditInfo');
                popup.style.opacity = '0';
                setTimeout(() => {
                    popup.style.display = 'none';
                    popup.style.opacity = '1';
                }, TIMEOUT_CONFIG.OPPDATERE_INNMELDING_FADE_DURATION);
            }, TIMEOUT_CONFIG.OPPDATERE_INNMELDING_EDIT_POPUP);
        });
        
        map.on('draw:edited', function (e) {
            const layers = e.layers;
            layers.eachLayer(function (layer) {
                const rawGeoJSON = layer.toGeoJSON();
                document.getElementById('GeometriGeoJson').value = JSON.stringify(rawGeoJSON.geometry);
                document.getElementById('lagreGeometriBtn').disabled = false;
                geometriEndret = true;
            });
        });
        
        map.on('draw:deleted', function (e) {
            if (drawnItems.getLayers().length === 0) {
                document.getElementById('GeometriGeoJson').value = '';
                document.getElementById('lagreGeometriBtn').disabled = false;
                geometriEndret = true;
            }
        });
        
        const form = document.getElementById('innmeldingForm');
        form.addEventListener('input', function () {
            harUlagredeEndringer = true;
        });

        document.getElementById('lagreTekstBtn').addEventListener('click', async function () {
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const formData = new FormData(form);
            try {
                const response = await fetch('@Url.Action("OppdatereInnmeldingDetaljer")', {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    harUlagredeEndringer = false;
                    visStatusMelding('Tekst lagret');
                } else {
                    visStatusMelding(result.message || 'Kunne ikke lagre tekst', true);
                }
            } catch (error) {
                console.error('Error:', error); // Legg til denne for debugging
                visStatusMelding('En feil oppstod', true);
            }
        });

        document.getElementById('lagreGeometriBtn').addEventListener('click', async function () {
            try {
                const geometriJson = document.getElementById('GeometriGeoJson').value;

                const model = {
                    InnmeldingId: parseInt(document.querySelector('input[name="InnmeldingId"]').value),
                    GeometriGeoJson: geometriJson
                };

                const response = await fetch('@Url.Action("OppdatereGeometri")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(model)
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText);
                }

                const result = await response.json();

                if (result.success) {
                    geometriEndret = false;
                    document.getElementById('lagreGeometriBtn').disabled = true;
                    visStatusMelding('Geometri lagret');
                } else {
                    visStatusMelding(result.message || 'Kunne ikke lagre geometri', true);
                }
            } catch (error) {
                console.error('Error:', error); // Legg til denne for debugging
                visStatusMelding('Kunne ikke lagre geometri: ' + error.message, true);
            }
        });
        
        function closeGeometryInfo() {
            document.getElementById('geometryEditInfo').style.display = 'none';
        }
        
        setTimeout(closeGeometryInfo, 10000);
        
        function visSlettModal() {
            document.getElementById('slettModal').style.display = 'block';
        }

        function lukkSlettModal() {
            document.getElementById('slettModal').style.display = 'none';
        }

        async function slettInnmelding() {
            try {
                const response = await fetch('@Url.Action("SlettInnmelding", new { innmeldingId = Model.InnmeldingId })', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const result = await response.json();
                if (result.success) {
                    visSlettingResultat(true);
                } else {
                    visSlettingResultat(false, result.message);
                }
            } catch (error) {
                visSlettingResultat(false);
            }
        }

function visSlettingResultat(success) {
    const modal = document.getElementById('slettModal');
    const modalTitle = modal.querySelector('.modal-header h3');
    const modalBody = modal.querySelector('.modal-body');
    const modalFooter = modal.querySelector('.modal-footer');
    
    if (success) {
        modalTitle.textContent = 'Sletting vellykket';
        modalBody.innerHTML = '<p>Innmeldingen er nå slettet</p>';
    } else {
        modalTitle.textContent = 'Feil ved sletting';
        modalBody.innerHTML = '<p>Kunne ikke slette innmeldingen, om feilen vedvarer vennligst ta kontakt</p>';
    }
    
    modalFooter.innerHTML = `
        <button class="map-button modal-button-blue" onclick="lukkModalOgRedirect('@Url.Action("MineInnmeldinger", "MineInnmeldinger")')">OK</button>
    `;
    
    modal.style.display = 'block';
}

function lukkModalOgRedirect(url) {
    document.getElementById('slettModal').style.display = 'none';
    window.location.href = url;
}

        document.getElementById('slettInnmeldingBtn').addEventListener('click', visSlettModal);
        
        window.addEventListener('beforeunload', function (e) {
            if (harUlagredeEndringer || geometriEndret) {
                e.preventDefault();
                e.returnValue = '';
            }
        });

        function visStatusMelding(melding, erFeil = false) {
            const popup = document.createElement('div');
            popup.className = 'status-popup' + (erFeil ? ' error' : ' success');
            popup.style.display = 'block'; 
            popup.style.opacity = '1';     
            popup.innerHTML = `
                <div class="status-content">
                    <i class="fas ${erFeil ? 'fa-exclamation-circle' : 'fa-check-circle'}"></i>
                    <span>${melding}</span>
                </div>
            `;
            document.body.appendChild(popup);
            
            setTimeout(() => {
                popup.style.opacity = '0';
                setTimeout(() => {
                    document.body.removeChild(popup);
                    window.location.href = '@Url.Action("MineInnmeldinger", "MineInnmeldinger")';
                }, TIMEOUT_CONFIG.OPPDATERE_INNMELDING_FADE_DURATION);
            }, TIMEOUT_CONFIG.OPPDATERE_INNMELDING_STATUS_MESSAGE);
        }
    </script>
}