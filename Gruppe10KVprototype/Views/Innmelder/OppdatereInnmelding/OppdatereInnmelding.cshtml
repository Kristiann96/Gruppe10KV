@model ViewModels.OppdatereInnmeldingViewModel
@{

    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.css" />

    <style>
        .updateRegisteredMapViewErrors {
            max-width: 50em;
            margin: 20px auto;
            padding: 20px;
        }

        .updateRegisteredCaseForm {
            max-width: 50em;
            margin: 20px auto;
            padding: 20px;
        }

        .updateRegisteredCaseActionButtons {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
        }
    </style>
}
<title>Oppdatere Innmelding</title>
@foreach (var OppdatereInnmeldinger in Model.OppdatereInnmeldinger)
{
    <!-- Form for oppdatering av Tittel og Beskrivelse -->
    <form asp-action="OppdatereInnmeldingForm" method="post" class="updateRegisteredCaseForm">
        <div class="updateRegisteredCaseID">
            <h3>Sak ID #@OppdatereInnmeldinger.InnmeldingId</h3>
            <input type="hidden" name="InnmeldingId" value="@OppdatereInnmeldinger.InnmeldingId" />
        </div>

        <div class="updateRegisteredCaseStatus">
            <h3>Status: @OppdatereInnmeldinger.Status</h3>
        </div>

        <div class="updateRegisteredCaseSubject">
            <h3>Tittel:</h3>
            <input type="text" name="Tittel" value="@OppdatereInnmeldinger.Tittel" />
        </div>

        <div class="updateRegisteredCaseDescription">
            <h3>Beskrivelse:</h3>
            <textarea name="Beskrivelse">@OppdatereInnmeldinger.Beskrivelse</textarea>
        </div>

        <div class="updateRegisteredCaseActionButtons">
            <button type="submit">Oppdater beskrivelse av sak</button>
        </div>
    </form>
}

<div class="updateRegisteredMapViewErrors">
    <h3>Kartvisning av feil:</h3>
    <div id="map" style="height: 50vh; width: 100%"></div>
</div>

<!-- Form for oppdatering av geometri -->
<form asp-action="OppdatereGeometri" method="post" class="updateRegisteredCaseForm">
    <input type="hidden" name="InnmeldingId" value="@Model.OppdatereInnmeldinger.FirstOrDefault()?.InnmeldingId" />
    <input type="hidden" id="geoJsonHiddenOppdatereInnmelding" name="GeometriGeoJson" value="@Model.Geometri?.GeometriGeoJson" />
    <div class="updateRegisteredCaseActionButtons">
        <button type="submit">Oppdater feil i kart</button>
    </div>
</form>

@section Scripts {
    <!-- JavaScript biblioteker -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script src="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.js"></script>

    <!-- Konfig av MapViews -->
    <script src="~/js/maps/config/mapConfig.js"></script>
    <script src="~/js/maps/config/drawConfig.js"></script>
    <script src="~/js/maps/services/wmsService.js"></script>
    <script src="~/js/maps/utils/mapControls.js"></script>

    <script>
        const map = MapConfig.initializeMap('map');
        // Initialize draw control
        const drawnItems = DrawConfig.initializeDrawControl(map);

        MapControls.initializeSearch(map);
        @if (Model?.Geometri != null && !string.IsNullOrEmpty(Model.Geometri.GeometriGeoJson))
        {
            <text>
                const geoJsonFeature = JSON.parse('@Html.Raw(Model.Geometri.GeometriGeoJson)');
                const geoJsonLayer = L.geoJSON(geoJsonFeature, {
                    onEachFeature: function (feature, layer) {
                    drawnItems.addLayer(layer);
                    }
                }).addTo(map);
                map.fitBounds(geoJsonLayer.getBounds());
            </text>
        }

        // Handle draw:edited event to update hidden input field
        map.on(L.Draw.Event.EDITED, function (event) {
            const layers = event.layers;
            layers.eachLayer(function (layer) {
                const geoJsonData = layer.toGeoJSON();
                document.getElementById('geoJsonHidden').value = JSON.stringify(geoJsonData);
            });
        });

        // Handle draw:created event to update hidden input field
        map.on(L.Draw.Event.CREATED, function (event) {
            const layer = event.layer;
            drawnItems.addLayer(layer);
            const geoJsonData = layer.toGeoJSON();
            document.getElementById('geoJsonHidden').value = JSON.stringify(geoJsonData);
        });

        // Handle draw:deleted event to clear hidden input field
        map.on(L.Draw.Event.DELETED, function (event) {
            document.getElementById('geoJsonHidden').value = '';
        });
    </script>
}