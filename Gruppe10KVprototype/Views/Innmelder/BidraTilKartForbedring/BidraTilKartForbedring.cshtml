@model ViewModels.BidraTilKartForbedringViewModel
@{
    ViewData["Title"] = "Bidra til kartforbedring";
    Layout = "_Layout";
}

@section Styles {
    <!-- Basis kart-styling - IKKE ENDRE -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.css" />
    <link rel="stylesheet" href="~/css/pages/TemporaryCSS/BidraTilKartForbedring.css" />
}

<div class="container-fluid p-0">
    <div id="welcomeModal" class="modal-overlay">
        <div class="modal-content">
            <h2 class="modal-title">Velkommen til kartforbedringsverktøyet</h2>
            <p class="modal-text">
                Her kan du hjelpe oss med å forbedre kartet ved å bekrefte eller avkrefte
                eksisterende kartdata. Hold over markørene på kartet for å se mer informasjon
                og gi din vurdering.
            </p>
            <button id="acceptBtn" class="modal-button">OK, jeg forstår</button>
        </div>
    </div>
    <div id="map"></div>
    <div id="validationMessage" class="validation-message"></div>
</div>

@section Scripts {
    <!-- Nødvendige scripts - IKKE ENDRE -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script src="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.js"></script>

    <script src="~/js/maps/config/mapConfig.js"></script>
    <script src="~/js/maps/services/wmsService.js"></script>
    <script src="~/js/maps/utils/mapControls.js"></script>

    <script>
        // Disable map interaction when modal is shown
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('map').style.pointerEvents = 'none';
        });

        // Enable map interaction when modal is closed
        document.getElementById('acceptBtn').addEventListener('click', function () {
            document.getElementById('welcomeModal').classList.add('hide');
            document.getElementById('map').style.pointerEvents = 'auto';
        });


        // Kart-initialisering
        const map = MapConfig.initializeMap('map');
        const baseMaps = {};
        const overlayMaps = {
            "Kommunegrenser": WMSService.addKommuneGrenser(map)
        };
        L.control.layers(baseMaps, overlayMaps).addTo(map);
        MapControls.initializeControls(map);

        // Globale variabler for tilstandshåndtering
        let hoverTimer;
        let popupTimer;
        const vurdertGeometrier = new Set();
        let aktivVurdering = false;
        let isPopupOpen = false;

        // Hent geometridata
        const geometriData = @Html.Raw(Model.GetGeometriDataAsJson());

        // Hjelpefunksjoner
        function showMessage(message, isError = false) {
            const messageElement = document.getElementById('validationMessage');
            messageElement.textContent = message;
            messageElement.style.display = 'block';
            messageElement.style.backgroundColor = isError ? '#f44336' : '#4CAF50';

            setTimeout(() => {
                messageElement.style.display = 'none';
            }, 3000);
        }

        function addVisualIndicator(layer, type) {
            if (type === 'LineString' || type === 'Polygon') {
                const bounds = layer.getBounds();
                const center = bounds.getCenter();

                const marker = L.circleMarker(center, {
                    radius: 12,           // Større radius
                    fillColor: '#fc03ec', // rosa fyll
                    color: '##fcd7fa',     // lyserosa kant
                    weight: 4,            // Tykkere kant
                    opacity: 1,
                    fillOpacity: 0.1      // Mer solid farge
                }).addTo(map);

                return marker;
            }
            return null;
        }

        function createPopupContent(data) {
            const container = document.createElement('div');
            container.className = 'popup-content';

            // Tittel
            const title = document.createElement('div');
            title.className = 'popup-title';
            title.textContent = data.Tittel;
            container.appendChild(title);

            // Hvis allerede vurdert i denne sesjonen
            if (vurdertGeometrier.has(data.InnmeldingId)) {
                const takkDiv = document.createElement('div');
                takkDiv.className = 'takk-melding';
                takkDiv.textContent = 'Takk for din vurdering!';
                container.appendChild(takkDiv);
                return container;
            }

            // Knapper-container
            const buttonsDiv = document.createElement('div');
            buttonsDiv.className = 'popup-buttons';

            // Kommentar-container
            const kommentarDiv = document.createElement('div');
            kommentarDiv.className = 'kommentar-container';

            // Bekreft/Avkreft knapper
            const bekreftBtn = document.createElement('button');
            bekreftBtn.className = 'popup-button bekreft-button';
            bekreftBtn.textContent = 'Bekreft';

            const avkreftBtn = document.createElement('button');
            avkreftBtn.className = 'popup-button avkreft-button';
            avkreftBtn.textContent = 'Avkreft';

            buttonsDiv.appendChild(bekreftBtn);
            buttonsDiv.appendChild(avkreftBtn);
            container.appendChild(buttonsDiv);

            // Kommentar elementer
            const textarea = document.createElement('textarea');
            textarea.className = 'kommentar-textarea';
            textarea.placeholder = 'Skriv en kort kommentar...';

            const sendBtn = document.createElement('button');
            sendBtn.className = 'popup-button send-button';
            sendBtn.textContent = 'Send vurdering';

            kommentarDiv.appendChild(textarea);
            kommentarDiv.appendChild(sendBtn);
            container.appendChild(kommentarDiv);

            let valgtType = null;

            // Knappehåndtering
            bekreftBtn.onclick = () => {
                valgtType = 'bekreftelse';
                aktivVurdering = true;
                buttonsDiv.style.display = 'none';
                kommentarDiv.style.display = 'block';
                clearTimeout(popupTimer);
            };

            avkreftBtn.onclick = () => {
                valgtType = 'avkreftelse';
                aktivVurdering = true;
                buttonsDiv.style.display = 'none';
                kommentarDiv.style.display = 'block';
                clearTimeout(popupTimer);
            };

            // Send-knapp håndtering
            sendBtn.onclick = async () => {
                const kommentar = textarea.value.trim();

                try {
                    const response = await fetch('/BidraTilKartForbedring/LagreVurdering', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            innmeldingId: data.InnmeldingId,
                            type: valgtType,
                            kommentar: kommentar
                        })
                    });

                    if (response.ok) {
                        vurdertGeometrier.add(data.InnmeldingId);
                        aktivVurdering = false;
                        kommentarDiv.style.display = 'none';

                        const takkDiv = document.createElement('div');
                        takkDiv.className = 'takk-melding';
                        takkDiv.textContent = 'Takk for din vurdering!';
                        container.innerHTML = '';
                        container.appendChild(title);
                        container.appendChild(takkDiv);

                        showMessage('Takk for ditt bidrag!');
                    } else {
                        showMessage('Det oppstod en feil ved lagring av vurderingen.', true);
                    }
                } catch (error) {
                    showMessage('Det oppstod en feil ved sending av vurderingen.', true);
                }
            };

            return container;
        }

        // Legg til geometrier på kartet
        geometriData.forEach(function (data) {
            try {
                // Parse og strukturer GeoJSON data
                const rawGeoJson = JSON.parse(data.GeometriGeoJson);
                const geoJsonFeature = {
                    type: "Feature",
                    geometry: {
                        type: rawGeoJson.type,
                        coordinates: rawGeoJson.coordinates
                    },
                    properties: {}
                };

                const layer = L.geoJSON(geoJsonFeature, {
                    style: function (feature) {
                        return {
                            color: '#05ede9',     // Turkis linje
                            weight: 8,            // Linjetykkelse
                            opacity: 0.9,         // Gjennomsiktighet
                            fillColor: '#fa05ed', // Rosa fyll
                            fillOpacity: 0.4      // Fyll-gjennomsiktighet
                        };
                    },
                    onEachFeature: function (feature, layer) {
                        let center;

                        // Håndter forskjellige geometrityper
                        if (feature.geometry.type === 'Point') {
                            center = L.latLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]);
                        } else {
                            const bounds = layer.getBounds();
                            center = bounds.getCenter();
                        }

                        // Legg til markør på senterpunktet
                        const marker = L.marker(center).addTo(map);

                        // Opprett popup med zoom-tilpasset størrelse
                        const popup = L.popup({
                            closeButton: true,
                            closeOnClick: false,
                            autoClose: false,
                            className: 'persistent-popup',
                            maxWidth: 250  // Standard maksbredde
                        });

                        popup.setContent(createPopupContent(data));

                        // Bind popup til både layer og markør
                        layer.bindPopup(popup);
                        marker.bindPopup(popup);

                        // Håndter popup-størrelse ved zoom
                        map.on('zoomend', function () {
                            const zoom = map.getZoom();
                            // Beregn ny maksbredde basert på zoom-nivå
                            // 250 er maksbredde, reduseres ved høyere zoom-nivå
                            const newMaxWidth = Math.max(200, Math.min(250, 250 * (1 - zoom / 20)));
                            if (popup.isOpen()) {
                                popup.options.maxWidth = newMaxWidth;
                                popup.update();
                            }
                        });

                        let hoverTimeout;

                        // Håndter hover events for både layer og markør
                        const handleMouseOver = function () {
                            if (hoverTimeout) clearTimeout(hoverTimeout);

                            hoverTimeout = setTimeout(() => {
                                if (!isPopupOpen) {
                                    layer.openPopup();
                                    isPopupOpen = true;
                                }
                            }, 500);
                        };

                        const handleMouseOut = function (e) {
                            if (hoverTimeout) clearTimeout(hoverTimeout);

                            const popup = document.querySelector('.leaflet-popup');
                            if (popup) {
                                const rect = popup.getBoundingClientRect();
                                const mouseX = e.originalEvent.clientX;
                                const mouseY = e.originalEvent.clientY;

                                if (mouseX >= rect.left && mouseX <= rect.right &&
                                    mouseY >= rect.top && mouseY <= rect.bottom) {
                                    return;
                                }
                            }

                            if (!aktivVurdering) {
                                layer.closePopup();
                                isPopupOpen = false;
                            }
                        };

                        // Legg til hover events på både layer og markør
                        layer.on('mouseover', handleMouseOver);
                        layer.on('mouseout', handleMouseOut);
                        marker.on('mouseover', handleMouseOver);
                        marker.on('mouseout', handleMouseOut);
                    }
                }).addTo(map);

                // Legg til popup mouseover/mouseout håndtering
                const popup = layer.getPopup();
                if (popup) {
                    popup.on('add', function () {
                        const popupElement = document.querySelector('.leaflet-popup');
                        if (popupElement) {
                            popupElement.addEventListener('mouseover', function () {
                                isPopupOpen = true;
                            });

                            popupElement.addEventListener('mouseout', function (e) {
                                if (!aktivVurdering) {
                                    const rect = this.getBoundingClientRect();
                                    if (e.clientX < rect.left || e.clientX > rect.right ||
                                        e.clientY < rect.top || e.clientY > rect.bottom) {
                                        isPopupOpen = false;
                                        layer.closePopup();
                                    }
                                }
                            });
                        }
                    });
                }

                // Legg til visuell indikator kun for ikke-punkt geometrier
                if (geoJsonFeature.geometry.type !== 'Point') {
                    const circleMarker = addVisualIndicator(layer, geoJsonFeature.geometry.type);
                    if (circleMarker) {
                        circleMarker.bindPopup(popup);

                        // Samme hover-oppførsel for sirkelmarkøren
                        circleMarker.on('mouseover', function (e) {
                            if (hoverTimeout) clearTimeout(hoverTimeout);
                            hoverTimeout = setTimeout(() => {
                                if (!aktivVurdering) {
                                    this.openPopup();
                                }
                            }, 500);
                        });

                        circleMarker.on('mouseout', function (e) {
                            if (hoverTimeout) clearTimeout(hoverTimeout);
                            if (!aktivVurdering) {
                                this.closePopup();
                            }
                        });
                    }
                }

            } catch (e) {
                console.error('Feil ved parsing av geometri:', e, data);
            }
        });
    </script>
}